name: Salesforce QA Pipeline with Fortify

# ----------------------------------------------------------------------
# 1. Pipeline Triggers
# ----------------------------------------------------------------------
on:
  push:
    branches:
      - build/QA
  pull_request:
    branches:
      - build/QA
      
jobs:
  fortify-scan:
    runs-on: ubuntu-latest
    
    # Define environment variables used by the Fortify action (Optional, can also use 'with' block)
    env:
      # Correct Fortify on Demand API Endpoint. NOTE: Check your tenant's specific URL if it differs.
      FOD_URL: https://ams.fortify.com 
      # Fortify Application and Release name format: ApplicationName:ReleaseName
      FOD_RELEASE: SalesforceQA:test 
      # Target the entire default source folder to include Apex, LWC, Aura, etc.
      FOD_SCAN_TARGET: ./force-app/main/default 
      # Wait for the cloud scan to complete before continuing the pipeline
      DO_WAIT: true 

    steps:
      # Step 1: Checkout repository 
      - name: â¬‡ Checkout code
        uses: actions/checkout@v4

      # Step 2 (Optional but Recommended): Build Dependencies
      # Although Fortify's Salesforce engine is robust, ensuring all dependencies 
      # are present in the package is generally good practice for FoD.
      - name: Build and Prep (e.g., Salesforce CLI install, dependency fetching)
        run: |
          # Install Salesforce CLI (used for dependency management if needed)
          npm install -g @salesforce/cli@latest
          # Example of retrieving LWC/Aura dependencies if necessary:
          # sf project retrieve --metadata ApexClass,LightningComponentBundle --target-org <alias>

      # Step 3: Run Fortify AST Scan
      - name: ðŸš€ Fortify on Demand SAST Scan & Upload
        uses: fortify/github-action@v2.1.1
        with:
          sast-scan: true
          # Enable Software Composition Analysis (SCA) for third-party library risks
          debricked-sca-scan: true 
          # Use secrets for authentication. Use env variables defined above or set them here.
        env:
          FOD_TENANT: ${{ secrets.FORTIFY_TENANT }} # Corrected variable name capitalization
          FOD_USER: ${{ secrets.FORTIFY_USER }}     # Standardized variable name
          FOD_PASSWORD: ${{ secrets.FORTIFY_PASSWORD }}
          # FOD_URL, FOD_RELEASE, FOD_SCAN_TARGET, DO_WAIT are inherited from the job's 'env' block

      # Step 4: Generate SARIF Report (Required for GitHub Code Scanning Integration)
      # This step contacts FoD and downloads the finished scan results as a SARIF file.
      - name: ðŸ“¥ Generate SARIF Report from FoD
        uses: fortify/github-action/fod-generate-sarif@v2.1.1
        if: always() # Run even if previous step had soft errors or warnings
        with:
          sarif-file: fortify_scan_report.sarif
        env:
          FOD_TENANT: ${{ secrets.FORTIFY_TENANT }}
          FOD_USER: ${{ secrets.FORTIFY_USER }}
          FOD_PASSWORD: ${{ secrets.FORTIFY_PASSWORD }}
          FOD_URL: https://ams.fortify.com # Must match the URL used in the scan step
          FOD_RELEASE: SalesforceQA:test
      
      # Step 5: Upload Fortify scan report as GitHub artifact (SARIF format)
      - name: â¬† Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          # This connects the Fortify results to GitHub's built-in Security tab
          sarif_file: fortify_scan_report.sarif


